{"version":3,"sources":["components/Image/Image.jsx","components/Inputs/Inputs.jsx","components/Button/Button.jsx","components/Album/Album.jsx","App.js","serviceWorker.js","index.js"],"names":["Image","props","image","currentImage","styles","StyleSheet","create","height","objectFit","justifyContent","textTop","color","fontSize","fontWeight","textBottom","ImageBackground","source","style","Text","topText","bottomText","Inputs","handleChangeInput","event","changeInput","handleFocus","clearState","className","value","this","name","onChange","onFocus","Component","Button","onClick","randomImage","Album","images","map","pic","idx","key","src","url","alt","href","selectImage","App","console","log","setState","target","randomIndex","Math","floor","random","state","length","isLoaded","fetch","then","res","json","result","data","memes","error","Boolean","window","location","hostname","match","ReactDOM","render","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c526d330.chunk.js","sourcesContent":["import React from 'react';\nimport { ImageBackground, StyleSheet, Text, View } from 'react-native';\n\n\nconst Image = props => {\n  let image = props.currentImage\n  const styles = StyleSheet.create({\n    image: {\n      height: '100%',\n      objectFit: 'contain',\n      justifyContent: \"space-between\"\n    },\n    textTop: {\n      color: \"white\",\n      'font-family': 'Impact, Charcoal, sans-serif',\n      '-webkit-text-stroke': '1px black',  \n      fontSize: '2rem',\n      fontWeight: \"bold\",\n    },\n    textBottom: {\n      color: \"white\",\n      'font-family': 'Impact, Charcoal, sans-serif',\n      '-webkit-text-stroke': '1px black',\n      fontSize: '2rem',\n      fontWeight: \"bold\"\n    }\n  });\n  \n  return (\n    <ImageBackground source={image} style={styles.image}>\n        <Text style={styles.textTop}>{props.topText}</Text>\n        <Text style={styles.textBottom}>{props.bottomText}</Text>\n    </ImageBackground>\n\n  )\n}\n\nexport default Image;\n\n\n","import React, { Component } from 'react';\n\nclass Inputs extends Component {\n  handleChangeInput = (event) => {\n    this.props.changeInput(event);\n  }\n\n  handleFocus = (event) => {\n    this.props.clearState(event);\n  }\n\n  render () {\n    return (\n      <div>\n        <input\n          className='topTextInput'\n          value={this.props.topText}\n          name='topText'\n          onChange={this.handleChangeInput}\n          onFocus={this.props.clearState}\n          />\n        <input\n          className='bottomTextInput'\n          value={this.props.bottomText}\n          name='bottomText'\n          onFocus={this.handleFocus}\n          onChange={this.handleChangeInput}\n          />\n      </div>\n    )\n  } \n}\n\nexport default Inputs;","import React from 'react';\n\nconst Button = props => {\n  return (\n    <div>\n      <button>Download Meme</button>\n      <button\n        onClick={props.randomImage}\n      >Random</button>\n    </div>\n  )\n}\n\nexport default Button;","import React from 'react';\n\nconst Album = props => {\n\n  const image = props.images.map((pic, idx) => (\n      <img className='newMeme'\n        key={idx}\n        src={pic.url} \n        alt={pic.name}\n      />  \n \n  ));\n  return(\n    <a href='#' onClick={props.selectImage}>\n      {image}\n    </a>  \n\n  )\n}\n\nexport default Album;","import React, { Component } from 'react';\nimport './App.css';\nimport Image from '../src/components/Image/Image'\nimport Inputs from '../src/components/Inputs/Inputs';\nimport Button from '../src/components/Button/Button';\nimport Album from '../src/components/Album/Album'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      images: [],\n      currentImage: 'https://i.imgflip.com/1bhk.jpg',\n      topText: \"top text\",\n      bottomText: \"bottom text\",\n      isLoaded: false\n    };\n  }\n  \n  componentDidMount() {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            images: result.data.memes\n          });\n        },\n        (error) => {\n          this.setState({\n            error\n          });\n        }\n      )  \n  }\n\n  changeInput = (event) => {\n    console.log(event)\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  selectImage = (event) => {\n    console.log(event)\n    this.setState({\n      currentImage: event.target.src\n    })\n  }\n\n  clearState = (event) => {\n    this.setState({\n      [event.target.name]: \"\"\n    })\n  }\n\n  randomImage = (event) => {\n    const randomIndex = Math.floor(Math.random() * this.state.images.length);\n    const image = this.state.images[randomIndex];\n    this.setState({currentImage: image.url});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          make a meme\n        </div>\n        <div className=\"footer\">\n          <a href=\"https://github.com/zsiskos/mintbeant-GA-hackathon-wed\" target=\"_blank\">Built by zoÃ«.Supernova </a>\n        </div>\n        <div className=\"image\">\n          <Image\n          className=\"image\" \n          bottomText={this.state.bottomText}\n          topText={this.state.topText}\n          currentImage={this.state.currentImage}\n          />\n        </div>\n        <div className=\"inputs\">\n          <Inputs\n            bottomText={this.state.bottomText}\n            topText={this.state.topText}\n            onClick={this.clearState} \n            changeInput={this.changeInput}\n          />\n        </div>\n        <div className=\"button\">\n          <Button\n            className=\"button\"\n            randomImage={this.randomImage}\n          />\n        </div>\n        <div className=\"album\">\n          <Album \n            images={this.state.images}\n            selectImage={this.selectImage}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <Route component={App} />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}